setwd('~/Dropbox/Mnase_ChIP/')
list.files()
load( 'Dusp1.RData' )
ls()
head(coordinates)
head(values)
cor(values)
X <- cbind( coordinates, values )
dim(X)
head(X)
plot.ts( X[, 3 : 5] )
plot.ts( X[, 3 : 5], main = 'Raw data' )
ls()
dir()
readLines('Dusp1.info.txt')
read.table('Dusp1.info.txt')
read.table('Dusp1.info.txt', skip = 1)
read.table('Dusp1.info.txt')
readLines('Dusp1.info.txt')
info <- readLines( 'Dusp1.info.txt' )
info
grep( 'RefSeq coordinates:', info )
info[ grep( 'RefSeq coordinates:', info ) ]
info[ grep( 'coordinates:', info ) ]
strsplit( info[ grep( 'coordinates:', info ) ], ':' )
strsplit( info[ grep( 'coordinates:', info ) ], ':' )[[ 1 ]][ 3 ]
strsplit( strsplit( info[ grep( 'coordinates:', info ) ], ':' )[[ 1 ]][ 3 ], '-' )
coordinates <-strsplit( strsplit( info[ grep( 'coordinates:', info ) ], ':' )[[ 1 ]][ 3 ], '-' )[[ 1 ]]
coordinates
info[ grep( 'Strand', info ) ]
strsplit( info[ grep( 'Strand', info ) ], ':' )
strsplit( info[ grep( 'Strand', info ) ], ':' )[[ 1 ]][ 2 ]
strand <- strsplit( info[ grep( 'Strand', info ) ], ':' )[[ 1 ]][ 2 ]
strand
coordinates <- ifelse( strand == '+', coordinates[ 1 ], coordinates[ 2 ] )
coordinates
coordinates <- as.numeric( strsplit( strsplit( coordLine, ':' )[[ 1 ]][ 3 ], '-' )[[ 1 ]] )
strand <- strsplit( info[ grep( 'Strand', info ) ], ':' )[[ 1 ]][ 2 ]#
coordLine <- info[ grep( 'coordinates:', info ) ]#
coordinates <- as.numeric( strsplit( strsplit( coordLine, ':' )[[ 1 ]][ 3 ], '-' )[[ 1 ]] )#
coordinates <- ifelse( strand == '+', coordinates[ 1 ], coordinates[ 2 ] )
coordinates
load( 'Dusp1.RData' )
ls()
coordinates
strand <- strsplit( info[ grep( 'Strand', info ) ], ':' )[[ 1 ]][ 2 ]#
coordLine <- info[ grep( 'coordinates:', info ) ]#
tssPos <- as.numeric( strsplit( strsplit( coordLine, ':' )[[ 1 ]][ 3 ], '-' )[[ 1 ]] )#
tssPos <- ifelse( strand == '+', tssPos[ 1 ], tssPos[ 2 ] )
tssPos
head(coordinates)
tssPos <- which( coordinates$start == tssPos )
tssPos
plot.ts( X[, 3 : 5], main = 'Raw data' )#
abline( h = tssRelPos )
tssRelPos <- which( coordinates$start == tssPos )#
#
#2. plot raw data#
plot.ts( X[, 3 : 5], main = 'Raw data' )#
abline( h = tssRelPos )
abline( v = 2)
abline( v = tssRelPos )
tssRelPos
tssRelPos <- which( coordinates$start == tssPos )
tssRelPos
tssPos
coordinates$start
which( coordinates$start == tssPos )
strand <- strsplit( info[ grep( 'Strand', info ) ], ':' )[[ 1 ]][ 2 ]#
coordLine <- info[ grep( 'coordinates:', info ) ]#
tssPos <- as.numeric( strsplit( strsplit( coordLine, ':' )[[ 1 ]][ 3 ], '-' )[[ 1 ]] )#
tssPos <- ifelse( strand == '+', tssPos[ 1 ], tssPos[ 2 ] )#
#
#1. combine coordinates and values in a df#
X <- cbind( coordinates, values )#
tssRelPos <- which( coordinates$start == tssPos )
tssRelPos
abline( v = tssRelPos )
abline( v = tssRelPos, col = 'red3' )
abline( v = tssRelPos, col = 'skyblue3' )
abline( v = tssRelPos, col = 'skyblue3', lwd = 22 )
abline( v = tssRelPos, col = 'skyblue3', lwd = 2 )
plot.ts( X[, 3 : 5], main = 'Raw data' )#
abline( v = tssRelPos, col = 'skyblue3', lwd = 2 )
plot.ts( X[, 3 : 5], main = 'Raw data (Dusp1)' )
abline( v = tssRelPos, col = 'skyblue3', lwd = 2 )
plot.ts( X[, 3 : 5], main = 'Raw data (Dusp1)', xlab = 'Relative genomic position' )
#2. plot raw data#
plot.ts( X[, 3 : 5], #
		 main = 'Raw data (Dusp1)', #
		 xlab = 'Genomic position',#
		 xaxt = 'n' )
plot.ts( X[, 3 : 5], #
		 main = 'Raw data (Dusp1)', #
		 xlab = 'Genomic position',#
		 xaxt = NULL )
?plot.ts
plot.ts( X[, 3 : 5], #
		 main = 'Raw data (Dusp1)', #
		 xlab = 'Genomic position',#
		 axes = FALSE )
?plot.ts
#2. plot raw data#
plot.ts( X[, 3 : 5], #
		 main = 'Raw data (Dusp1)', #
		 xlab = 'Genomic position',#
		 axes = FALSE,plot.type = 'single' )#
abline( v = tssRelPos, col = 'skyblue3', lwd = 2 )
ts( X[, 3 : 5], start = X[ 1, 1 ], frequency = 1)
plot.ts( ts( X[, 3 : 5], start = X[ 1, 1 ], frequency = 1) )
plot.ts( Xts, #
		 main = 'Raw data (Dusp1)', #
		 xlab = 'Genomic position' )
#2. plot raw data#
Xts <- ts( X[, 3 : 5], start = X[ 1, 1 ], frequency = 1) )#
plot.ts( Xts, #
		 main = 'Raw data (Dusp1)', #
		 xlab = 'Genomic position' )
#2. plot raw data#
Xts <- ts( X[, 3 : 5], start = X[ 1, 1 ], frequency = 1) #
plot.ts( Xts, #
		 main = 'Raw data (Dusp1)', #
		 xlab = 'Genomic position' )
abline( v = tssRelPos, col = 'skyblue3', lwd = 2 )
abline( v = tssPos, col = 'skyblue3', lwd = 2 )
setwd( '~/Dropbox/Mnase_ChIP/' )#
#
#0. load data and init#
load( 'Dusp1.RData' )#
info <- readLines( 'Dusp1.info.txt' )#
#
strand <- strsplit( info[ grep( 'Strand', info ) ], ':' )[[ 1 ]][ 2 ]#
coordLine <- info[ grep( 'coordinates:', info ) ]#
tssPos <- as.numeric( strsplit( strsplit( coordLine, ':' )[[ 1 ]][ 3 ], '-' )[[ 1 ]] )#
tssPos <- ifelse( strand == '+', tssPos[ 1 ], tssPos[ 2 ] )#
#
#1. combine coordinates and values in a df#
X <- cbind( coordinates, values )#
#
#2. plot raw data#
Xts <- ts( X[, 3 : 5], start = X[ 1, 1 ], frequency = 1) #
#
plot.ts( Xts, #
		 main = 'Raw data (Dusp1)', #
		 xlab = 'Genomic position' )	 #
abline( v = tssPos, col = 'skyblue3', lwd = 2 )#
#
#3.
library( wavelets )
wt <- dwt( X[, 3 : 5], n.level = 3, boundary = 'reflection', fast = FALSE)
wt <- dwt( X[, 3], n.level = 3, boundary = 'reflection', fast = FALSE)
wt
plot(wt)
showMethods('plot')
class(wt)
wt <- dwt( X[, 3], n.level = 8, boundary = 'reflection', fast = FALSE)
wt
str(wt)
plot(wt)
wt <- dwt( X[, 3], n.level = 4, boundary = 'reflection', fast = FALSE)
plot(wt)
install.packages('rwt')
library( rwt )
denoise( X[, 3] )
denoise( X[, 3], h = 1 )
denoise( X[, 3], h = 1, type = 'DWT.TRANSFORM.TYPE' )
daubcqf(2)
daubcqf(4)
denoise( X[, 3], h = daubcqf(4), type = 'DWT.TRANSFORM.TYPE' )
denoise( X[, 3], h = daubcqf(4)$h.0, type = 'DWT.TRANSFORM.TYPE' )
denoise( X[, 3], h = daubcqf(4)$h.0, type = DWT.TRANSFORM.TYPE )
denoise.dwt( X[, 3], h = daubcqf(4)$h.0  )
library(waveslim)
?modwt
modwt( X[, 3], wf = 'la8', n.levels = 1, boundary = 'periodic')
detach(waveslim)
unloadNamespace('waveslim')
modwt( X[, 3], wf = 'la8', n.levels = 1, boundary = 'periodic')
?modwt
unloadNamespace('wavelets')
library( waveslim )
modwt( X[, 3], wf = 'la8', n.levels = 1, boundary = 'periodic')
wt <- modwt( X[, 3], wf = 'la8', n.levels = 1, boundary = 'periodic')
wt
plot(wt)
stackPlot( ts(wt))
ts(wt)
str(ts(wt))
str(Xts)
str(wt)
str(Xts$s1)
str(wt$s1)
ts(str(wt$s1))
ts(wt$s1)
stackPlot( ts(wt$s1) )
wt <- modwt( X[, 3], wf = 'la8', n.levels = 4, boundary = 'periodic')
str(wt)
plot(wt$s4)
plot(wt$s4, type = 'l')
stackPlot( ts(c(wt$d1, wt$d2) )
)
stackPlot( ts(cbind(wt$d1, wt$d2) )
)
stackPlot( ts(cbind(wt$d1, wt$d2, wt$d3, wt$d4) ) )
length(X[,3])
length(X[,3]) / 2^4
length(X[,3]) / 2^8
length(X[,3]) / 2^6
length(X[,3]) / 2^7
wt <- modwt( X[, 3], wf = 'la8', n.levels = 6, boundary = 'periodic' )
plot.ts( ts(cbind(wt$d1, wt$d2, wt$d3, wt$d4, wt$d5, wt$d6) ) )
head(X)
#3. Compute MODWT#
wtUT <- modwt( X[, 3], wf = 'la8', n.levels = 6, boundary = 'periodic' )#
wt30 <- modwt( X[, 4], wf = 'la8', n.levels = 6, boundary = 'periodic' )#
wt60 <- modwt( X[, 5], wf = 'la8', n.levels = 6, boundary = 'periodic' )
plot.ts( ts(cbind(wtUT$d1, wtUT $d2, wtUT $d3, wtUT $d4, wtUT $d5, wtUT $d6) ) )
plot.ts( ts(cbind(wt30 $d1, wt30$d2, wt30$d3, wt30$d4, wt30$d5, wt30$d6) ) )
ts( cbind( wtUT$s6, wt30$s6, wt60$s6) )
wtts <- ts( cbind( wtUT$s6, wt30$s6, wt60$s6) )
plot.ts( wtts, #
		 main = 'MODWT (Dusp1)', #
		 xlab = 'Genomic position' )
wtts <- ts( cbind( wtUT$s6, wt30$s6, wt60$s6), start = X[ 1, 1 ], frequency = 1 )
plot.ts( wtts, #
		 main = 'MODWT (Dusp1)', #
		 xlab = 'Genomic position' )	 #
abline( v = tssPos, col = 'skyblue3', lwd = 2 )
2^6
plot.ts( wtts, #
		 main = 'MODWT (Dusp1) - level 6 (i.e. 2^6)', #
		 xlab = 'Genomic position' )	 #
abline( v = tssPos, col = 'skyblue3', lwd = 2 )
#3. Compute MODWT#
lev <- 4#
#lev <- 6#
wtUT <- modwt( X[, 3], wf = 'la8', n.levels = lev, boundary = 'periodic' )#
wt30 <- modwt( X[, 4], wf = 'la8', n.levels = lev, boundary = 'periodic' )#
wt60 <- modwt( X[, 5], wf = 'la8', n.levels = lev, boundary = 'periodic' )#
#
wtts <- ts( cbind( wtUT$s4, wt30$s4, wt60$s4), start = X[ 1, 1 ], frequency = 1 )#
#wtts <- ts( cbind( wtUT$s6, wt30$s6, wt60$s6), start = X[ 1, 1 ], frequency = 1 )#
plot.ts( wtts, #
		 main = 'MODWT (Dusp1) - level 4 (i.e. 2^4)', #
		 xlab = 'Genomic position' )	 #
abline( v = tssPos, col = 'skyblue3', lwd = 2 )
cbind( wtUT$s4, wtUT$s6, wt30$s4, wt30$s6, wt60$s4, wt60$s6 )
head(wt60$s4)
head(cbind( wtUT$s4, wtUT$s6, wt30$s4, wt30$s6, wt60$s4, wt60$s6 )#
)
lev <- 4#
#lev <- 6#
wtUT <- modwt( X[, 3], wf = 'la8', n.levels = lev, boundary = 'periodic' )#
wt30 <- modwt( X[, 4], wf = 'la8', n.levels = lev, boundary = 'periodic' )#
wt60 <- modwt( X[, 5], wf = 'la8', n.levels = lev, boundary = 'periodic' )
S4 <- cbind( wtUT$s4, wt30$s4, wt60$s4 )
lev <- 6
wtUT <- modwt( X[, 3], wf = 'la8', n.levels = lev, boundary = 'periodic' )#
wt30 <- modwt( X[, 4], wf = 'la8', n.levels = lev, boundary = 'periodic' )#
wt60 <- modwt( X[, 5], wf = 'la8', n.levels = lev, boundary = 'periodic' )
S6 <- cbind( wtUT$s6, wt30$s6, wt60$s6 )
modwt <- cbind( S4, S6 )
modwt
cor(wt30)
cor(modwt)
pairs(modwt)
colnames( modwt )
colnames( modwt ) <- c( 'UTlev4', '30lev4', '60lev4', 'UTlev4', '30lev4', '60lev4' )
colnames( modwt ) <- c( 'UTlev4', '30lev4', '60lev4', 'UTlev6', '30lev6', '60lev6' )
save( modwt, file = 'MODWT_lev4_lev6.Rdata' )
dim(modwt)
dim(X)
modwt <- cbind( X[, 1:2], S4, S6 )
colnames( modwt ) <- c( 'start', 'end', 'UTlev4', '30lev4', '60lev4', 'UTlev6', '30lev6', '60lev6' )
save( modwt, file = 'MODWT_lev4_lev6.Rdata' )
head(modwt)
0.00000352*1e5
0.00000352*1e6
0.00000000000574*1e10
0.00000000000574*1e12
0.0000000000219*1e12
0.0000000000219*1e11
0.00000271*1e6
2^5/2^3.5
2^3.2/2^1.5
0.0000000000000000000000262*1e20
0.0000000000000000000000262*1e22
0.0000000000000000000000262*1e23
0.0000000000000191*1e10
0.0000000000000191*1e13
0.0000000000000191*1e14
0.000000000000000346*1e16
0.00000000000000138*1e-11
0.00000000000000138*1e11
0.00000000000000138*1e14
0.00000000000000138*1e15
5959-5474
2989-2777
28+212+376+485
library(wavClusteR)
?wavClusteR
cd('~/Documents/Work/GitHub/wavClusteR/')
setwd('~/Documents/Work/GitHub/wavClusteR/')
library(roxygen2)
?roxigenize
roxygenize()
roxygenize()
library(wavClusteR)
filename <- system.file( "extdata", "example.bam", package = "wavClusteR" )#
Bam <- readSortedBam(filename = filename)
filename
sessionInfo()
